import { useState, useEffect, useRef } from 'react';
import { postMessage, getRepositoryMessages } from '../utils/userActions';
import { useAuth } from '../context/AuthContext';
import { client } from '../lib/appwrite';
import { DATABASES_ID, MESSAGES_COLLECTION_ID } from '../lib/appwrite';
import { ID } from 'appwrite';
import { recordUserActivity, startUserPresence, stopUserPresence, getActiveUsers } from '../utils/realtimeUtils';

function RepoChat({ repoId, repoName }) {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [activeUsers, setActiveUsers] = useState([]);
  const [showActiveUsers, setShowActiveUsers] = useState(false);
  const { user } = useAuth();
  const messageEndRef = useRef(null);
  const [subscription, setSubscription] = useState(null);
  const [typing, setTyping] = useState(false);
  const typingTimeoutRef = useRef(null);
  const activeUsersDropdownRef = useRef(null);
  
  // Fetch initial messages
  useEffect(() => {
    const fetchMessages = async () => {
      try {
        setLoading(true);
        const messagesData = await getRepositoryMessages(repoId);
        setMessages(messagesData);
      } catch (error) {
        console.error('Failed to fetch messages:', error);
        setError('Failed to load chat messages');
      } finally {
        setLoading(false);
      }
    };

    if (repoId) {
      fetchMessages();
    }

    return () => {
      // Clean up subscription when component unmounts
      if (subscription) {
        subscription();
      }
    };
  }, [repoId]);

  // Set up realtime subscription with database
  useEffect(() => {
    if (!repoId) return;
    
    // Subscribe to changes in the messages collection for this repo
    const unsubscribe = client.subscribe(
      `databases.${DATABASES_ID}.collections.${MESSAGES_COLLECTION_ID}.documents`,
      (response) => {
        // Get event type and payload
        const eventType = response.events[0];
        const payload = response.payload;
        
        // Only process events for this repo's messages
        if (payload.repoId === repoId) {
          console.log('Database real-time event received:', eventType, payload);
          
          if (eventType.includes('documents.*.create')) {
            // Add new message to the list
            setMessages(prevMessages => {
              // Check if message already exists to avoid duplicates
              const exists = prevMessages.some(msg => msg.$id === payload.$id);
              if (!exists) {
                return [...prevMessages, payload];
              }
              return prevMessages;
            });
          } 
          else if (eventType.includes('documents.*.update')) {
            // Update existing message
            setMessages(prevMessages => 
              prevMessages.map(msg => msg.$id === payload.$id ? payload : msg)
            );
          }
          else if (eventType.includes('documents.*.delete')) {
            // Remove deleted message
            setMessages(prevMessages => 
              prevMessages.filter(msg => msg.$id !== payload.$id)
            );
          }
        }
      }
    );
    
    setSubscription(unsubscribe);

    // Clean up subscription when component unmounts or repoId changes
    return () => {
      unsubscribe();
    };
  }, [repoId]);

  // Scroll to bottom when new messages arrive
  useEffect(() => {
    messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);
  
  // Set up user presence tracking
  useEffect(() => {
    if (!repoId || !user) return;
    
    // Start tracking presence for this user in this repo
    startUserPresence(repoId, user.$id, user.name, user.email);
    
    // Update active users list every 10 seconds
    const intervalId = setInterval(() => {
      const active = getActiveUsers(repoId);
      setActiveUsers(active);
    }, 10000);
    
    // Initial active users fetch
    setActiveUsers(getActiveUsers(repoId));
    
    // Clean up presence tracking and interval when component unmounts
    return () => {
      stopUserPresence();
      clearInterval(intervalId);
    };
  }, [repoId, user]);
  
  // Handle clicks outside of active users dropdown
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (activeUsersDropdownRef.current && !activeUsersDropdownRef.current.contains(event.target)) {
        setShowActiveUsers(false);
      }
    };
    
    // Add event listener
    document.addEventListener('mousedown', handleClickOutside);
    
    // Clean up
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);
  
  // Handle user typing indicator
  const handleTyping = () => {
    if (!user || !repoId) return;
    
    // Record activity with typing flag
    recordUserActivity(repoId, user.$id, user.name, user.email);
    
    // Clear existing timeout if any
    if (typingTimeoutRef.current) {
      clearTimeout(typingTimeoutRef.current);
    }
    
    // Set typing status
    setTyping(true);
    
    // Clear typing status after 2 seconds of inactivity
    typingTimeoutRef.current = setTimeout(() => {
      setTyping(false);
    }, 2000);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!newMessage.trim() || !user) return;
    
    try {
      const messageText = newMessage.trim();
      
      // Show optimistic UI update by adding temporary message immediately
      const tempId = ID.unique();
      const tempMessage = {
        $id: tempId,
        userId: user.$id,
        repoId: repoId,
        text: messageText,
        createdAt: new Date().toISOString(),
        isOptimistic: true, // Flag to identify optimistic updates
        status: 'sending'
      };
      
      // Only add userName and userEmail if they exist in the user object
      if (user.name) {
        tempMessage.userName = user.name;
      }
      
      if (user.email) {
        tempMessage.userEmail = user.email;
      }
      
      // Add to local state immediately for better UX
      setMessages(prevMessages => [...prevMessages, tempMessage]);
      setNewMessage('');
      
      // Track message sending
      console.log('Sending message:', tempMessage);
      
      // Send message using the postMessage function that uses Appwrite Database
      const sentMessage = await postMessage(user.$id, repoId, messageText);
      console.log('Message sent successfully:', sentMessage);
      
      // Update the optimistic message with the actual message ID
      setMessages(prevMessages => 
        prevMessages.map(msg => 
          msg.isOptimistic && msg.$id === tempId
            ? { ...msg, isOptimistic: false, status: 'sent', $id: sentMessage.$id }
            : msg
        )
      );
      
      // Note: The actual message will come through the subscription
      // and any further updates will be handled there
    } catch (error) {
      console.error('Failed to send message:', error);
      
      // Update the optimistic message to show error
      setMessages(prevMessages => 
        prevMessages.map(msg => 
          msg.isOptimistic 
            ? { ...msg, status: 'error' }
            : msg
        )
      );
      
      // Show error to user
      alert(`Failed to send message: ${error.message || 'Unknown error'}`);
    }
  };

  if (loading) {
    return (
      <div className="glass-card p-6 h-80 flex items-center justify-center fade-in">
        <div className="relative w-16 h-16">
          <div className="absolute inset-0 rounded-full border-4 border-t-[#FD366E] border-r-transparent border-b-transparent border-l-transparent animate-spin"></div>
          <div className="absolute inset-2 rounded-full border-4 border-t-transparent border-r-[#FD366E] border-b-transparent border-l-transparent animate-spin animation-delay-150"></div>
          <div className="absolute inset-4 rounded-full border-4 border-t-transparent border-r-transparent border-b-[#FD366E] border-l-transparent animate-spin animation-delay-300"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="glass-card p-6 fade-in">
        <div className="flex items-center gap-3 text-red-500">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
          <p className="text-lg font-medium">{error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="glass-card shadow-lg transform transition-all duration-300 hover:shadow-xl">
      <div className="p-6 border-b border-[var(--glass-border)]">
        <div className="flex justify-between items-center">
          <div className="fade-in">
            <h2 className="text-2xl font-medium bg-gradient-to-r from-[#FD366E] to-[#E8245C] text-transparent bg-clip-text">
              Discussions: {repoName || 'Repository'}
            </h2>
            <p className="text-sm text-gray-600 mt-2 pl-1">
              Chat with other contributors about this repository
            </p>
          </div>

          {/* Active users indicator */}
          <div 
            className="relative cursor-pointer transition-transform hover:scale-105" 
            onClick={() => setShowActiveUsers(!showActiveUsers)}
            title="Active users"
          >
            <div className="flex -space-x-3">
              {activeUsers.slice(0, 3).map((activeUser, i) => (
                <div 
                  key={activeUser.userId}
                  className="w-10 h-10 rounded-full flex items-center justify-center text-white border-2 border-white shadow-md pulse"
                  style={{
                    background: `linear-gradient(135deg, #FD366E ${i*20}%, #E8245C 100%)`,
                    zIndex: 3 - i,
                    animationDelay: `${i * 0.2}s`
                  }}
                >
                  {activeUser.name.charAt(0)}
                </div>
              ))}
              {activeUsers.length > 3 && (
                <div className="w-10 h-10 rounded-full bg-gradient-to-r from-gray-400 to-gray-500 flex items-center justify-center text-white font-medium border-2 border-white shadow-md" style={{ zIndex: 0 }}>
                  +{activeUsers.length - 3}
                </div>
              )}
              {activeUsers.length === 0 && (
                <div className="w-10 h-10 rounded-full bg-gradient-to-r from-gray-200 to-gray-300 flex items-center justify-center text-gray-500 border-2 border-white shadow-md">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                </div>
              )}
            </div>
            
            {/* Online users dropdown */}
            {showActiveUsers && activeUsers.length > 0 && (
              <div 
                ref={activeUsersDropdownRef}
                className="absolute right-0 mt-3 w-64 glass-card bg-opacity-95 backdrop-blur-md shadow-lg z-10 border-[var(--glass-border)] fade-in"
              >
                <div className="p-3 border-b border-[var(--glass-border)] bg-gradient-to-r from-[rgba(253,54,110,0.1)] to-transparent">
                  <h3 className="text-sm font-medium flex items-center gap-2">
                    <span className="w-3 h-3 bg-green-400 rounded-full"></span>
                    Active users
                  </h3>
                </div>
                <div className="max-h-48 overflow-y-auto p-1">
                  {activeUsers.map((user, index) => (
                    <div 
                      key={user.userId} 
                      className="p-2 rounded-md hover:bg-white hover:bg-opacity-20 flex items-center transition-all"
                      style={{ animationDelay: `${index * 0.05}s` }}
                    >
                      <div className="avatar-circle w-8 h-8 mr-3">
                        {user.name.charAt(0)}
                      </div>
                      <span className="text-sm font-medium">{user.name}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Messages container */}
      <div className="p-6 h-96 overflow-y-auto bg-gradient-to-b from-transparent to-[rgba(248,248,248,0.3)]">
        {messages.length === 0 ? (
          <div className="h-full flex flex-col items-center justify-center">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 text-gray-300 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
            </svg>
            <p className="text-gray-500 text-center font-light text-lg">
              No messages yet. Be the first to start a discussion!
            </p>
            <button className="modern-button mt-4">
              <span>Start chatting</span>
            </button>
          </div>
        ) : (
          <div className="space-y-4">
            {/* Group messages by date */}                    {msg.status === 'sent' && (
                      <span className="ml-2 text-green-500" title="Delivered">
                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" viewBox="0 0 16 16">
                          <path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z"/>
                        </svg>
                      </span>
                    )}
                    
                    {msg.status === 'error' && (
                      <span className="ml-2 text-red-500" title="Failed to send">
                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" viewBox="0 0 16 16">
                          <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                          <path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z"/>
                        </svg>
                      </span>
                    )}
                  </div>
                  <p className="break-words">
                    {msg.text}
                  </p>
                </div>
              );
              
              return groups;
            }, [])}
            <div ref={messageEndRef} />
          </div>
        )}
      </div>

      {/* Message input */}
      <form onSubmit={handleSubmit} className="p-4 border-t border-[#EDEDF0]">
        {!user ? (
          <div className="text-center p-3 bg-gray-100 rounded-md">
            <p className="text-gray-600">Please login to join the discussion</p>
          </div>
        ) : (
          <>
            <div className="flex items-center mb-2 text-xs text-gray-500">
              <div className="w-6 h-6 bg-[#FD366E] rounded-full flex items-center justify-center text-white mr-2">
                {user.name?.charAt(0) || 'U'}
              </div>
              <span>Posting as {user.name || 'User'}</span>
            </div>
            <div className="flex relative">
              <input
                type="text"
                value={newMessage}
                onChange={(e) => {
                  setNewMessage(e.target.value);
                  handleTyping();
                }}
                onKeyDown={(e) => {
                  // Allow sending with Enter key (but not with Shift+Enter)
                  if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    if (newMessage.trim()) handleSubmit(e);
                  }
                  handleTyping();
                }}
                placeholder="Type a message..."
                className="flex-1 p-3 pr-12 border border-[#EDEDF0] rounded-md focus:outline-none focus:ring-2 focus:ring-[#FD366E20] focus:border-[#FD366E]"
              />
              <button
                type="submit"
                disabled={!newMessage.trim()}
                className="absolute right-2 top-1/2 transform -translate-y-1/2 bg-[#FD366E] text-white p-1.5 rounded-full disabled:opacity-50 hover:bg-[#E8245C] transition-colors"
                title="Send message"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                  <path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 3.178 4.995.002.002.26.41a.5.5 0 0 0 .886-.083l6-15Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z"/>
                </svg>
              </button>
            </div>
            <div className="text-xs text-gray-500 mt-2">
              Press Enter to send, Shift+Enter for new line
            </div>
          </>
        )}
      </form>
    </div>
  );
}

export default RepoChat;
